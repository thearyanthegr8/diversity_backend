
  {
    "question": "What are the time complexities of various operations in a binary search tree (BST)? Explain how balancing affects performance.",
    "answer": "The time complexity for search, insertion, and deletion in a BST is O(h), where h is the height of the tree. In the best case (balanced tree), operations take O(log n), while in the worst case (skewed tree), they take O(n). Balancing using AVL or Red-Black trees ensures logarithmic height, maintaining O(log n) for operations."
  },
  {
    "question": "Describe the working of Dijkstra’s algorithm. How does it differ from the Bellman-Ford algorithm?",
    "answer": "Dijkstra’s algorithm finds the shortest path from a source node to other nodes in a weighted graph using a priority queue. It assumes non-negative weights. The Bellman-Ford algorithm, however, works with graphs containing negative weights and can detect negative weight cycles, though it has a higher time complexity of O(V*E)."
  },
  {
    "question": "What is dynamic programming? Provide an example where dynamic programming is more efficient than a greedy algorithm.",
    "answer": "Dynamic programming solves problems by storing solutions to subproblems, avoiding redundant calculations. It is useful when a problem exhibits overlapping subproblems and optimal substructure. An example is the knapsack problem, where dynamic programming gives the optimal solution, whereas a greedy approach may fail to do so."
  },
  {
    "question": "Explain the concept of hashing and collision resolution techniques. What are the trade-offs of different methods?",
    "answer": "Hashing maps data to a fixed-size table using a hash function. Collisions, where two elements map to the same index, are resolved using techniques like chaining (storing multiple elements in the same bucket) and open addressing (probing for an empty spot). Chaining is simpler but requires extra space, while open addressing is space-efficient but can lead to clustering."
  },
  {
    "question": "Discuss the importance of Big-O notation in algorithm analysis. How would you compare two algorithms with different time complexities?",
    "answer": "Big-O notation describes the worst-case time complexity of an algorithm, focusing on the rate of growth relative to input size. To compare algorithms, one should consider their growth rates; for example, O(n) is more efficient than O(n^2) for large inputs because O(n^2) grows significantly faster, impacting performance as input size increases."
  },
  {
    "question": "What is the difference between depth-first search (DFS) and breadth-first search (BFS)? In which scenarios is one preferred over the other?",
    "answer": "DFS explores as far as possible along a branch before backtracking, using a stack or recursion. BFS explores all neighbors level by level using a queue. BFS is preferred for finding the shortest path in unweighted graphs, while DFS is useful in topological sorting and cycle detection in directed graphs."
  },
  {
    "question": "Describe the Merge Sort algorithm. How does it differ from Quick Sort in terms of time complexity and space complexity?",
    "answer": "Merge Sort divides the array into halves, recursively sorts them, and merges the sorted halves, with a time complexity of O(n log n). However, it requires O(n) additional space for merging. Quick Sort, on the other hand, has an average time complexity of O(n log n) but can degrade to O(n^2) in the worst case. It is an in-place algorithm, requiring less space."
  },
  {
    "question": "Explain the concept of a heap. How does a min-heap differ from a max-heap? Describe a real-world application of heaps.",
    "answer": "A heap is a complete binary tree where each node is ordered with respect to its children. In a min-heap, the parent is smaller than its children, while in a max-heap, the parent is larger. Heaps are used in priority queues, where the highest (or lowest) priority element is retrieved first, and in algorithms like heapsort and Dijkstra’s shortest path algorithm."
  },
  {
    "question": "What are graph traversal techniques? How can they be used to detect cycles in a graph?",
    "answer": "Graph traversal techniques include DFS and BFS. DFS can be used to detect cycles by looking for back edges in a directed graph, which indicate a cycle. In an undirected graph, cycles can be detected if a node is visited more than once without backtracking. BFS can also detect cycles by checking visited nodes during traversal."
  }